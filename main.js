const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const token = '8125764878:AAHKwqCtYKeYcXDoG8x09mapynEq-m_WxF8'; // —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });
const KeepAlive = require('./keep_alive.js');

const requiredChannel = '-1001857511663'; // –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ id –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —á—Ç–æ–± —á–µ–ª–æ–≤–µ–∫ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω
const requiredChannelLink = "https://t.me/AmericaninSPB"; // –∞ –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª

const testQuestions = [
  {
    question: '1/25 How old are you?',
    options: ['I is 25.', 'I have 25.', 'I am 25.'],
    correct: 2
  },
  {
    question: '2/25 Do you work on Fridays?',
    options: ['Yes, I work.', 'Yes, I do.', 'Yes, I am.'],
    correct: 1
  },
  {
    question: '3/25 Do you have a brother?',
    options: ['No, I not have.', 'No, me don‚Äôt.', 'No, I don‚Äôt.'],
    correct: 2
  },
  {
    question: '4/25 I‚Äôm going to the shop. ________ you like to come?',
    options: ['Do', 'Are', 'Would'],
    correct: 2
  },
  {
    question: '5/25 I‚Äôd like ____ sugar in my coffee.',
    options: ['Some', 'Any', 'A'],
    correct: 0
  },
  {
    question: '6/25 _ a hospital near here?',
    options: ['There is', 'Is there', 'There are'],
    correct: 1
  },
  {
    question: '7/25 Have you finished _ the kitchen yet?',
    options: ['to clean', 'cleaning', 'cleaned'],
    correct: 1
  },
  {
    question: '8/25 She drove the car _ the garage.',
    options: ['between', 'out of', 'down'],
    correct: 1
  },
  {
    question: '9/25 He ___ very fast when the police _ him.',
    options: ['drove / stop', 'was driving / stopped', 'has drove / was stopping'],
    correct: 1
  },
  {
    question: '10/25 He is good at his job so he ____ a lot of money.',
    options: ['Makes', 'Does', 'Have'],
    correct: 0
  },
  {
    question: '11/25 Do you _ coffee? Yes, but _ to quit.',
    options: ['drink / I‚Äôm trying', 'drinking / I try', 'drunk / I‚Äôm trying'],
    correct: 0
  },
  {
    question: '12/25 I hurt my leg ____ I was playing football.',
    options: ['During', 'while', 'for'],
    correct: 1
  },
  {
    question: '13/25 This coffee tastes __ the other.',
    options: ['sweeter than', 'more sweet than', 'more sweeter than'],
    correct: 0
  },
  {
    question: '14/25 David _ in that industry for many years so a lot of contacts.',
    options: ['is working', 'has been working', 'have worked'],
    correct: 1
  },
  {
    question: '15/25 _ my leg. I broke it while playing football with my brother.',
    options: ['I‚Äôve broken / I broke', 'Broke / I‚Äôve broken'],
    correct: 0
  },
  {
    question: '16/25 When my brother was 20 he  in an apartment in London. At that time, he  at HSBC.',
    options: ['used to live / was working', 'had lived / worked', 'would live / had worked'],
    correct: 0
  },
  {
    question: '17/25 I  an umbrella with me this morning because it __.',
    options: ['didn‚Äôt take / rained', 'took / was raining', 'took / have rained'],
    correct: 1
  },
  {
    question: '18/25 __ your question about our services, I have attached a document where you can see all necessary details.',
    options: ['As far as', 'Where as', 'Regarding'],
    correct: 2
  },
  {
    question: '19/25 If only I __ that you wanted to meet her.',
    options: ['I know', 'had known', 'have known'],
    correct: 1
  },
  {
    question: '20/25 We‚Äôd better find a quick solution to this crisis, __ all our customers will start to lose faith in us.',
    options: ['in fact', 'otherwise', 'after all'],
    correct: 1
  },
  {
    question: '21/25 The family was shocked that the crime happened in _ daylight.',
    options: ['wide', 'large', 'broad'],
    correct: 2
  },
  {
    question: '22/25 Tony has had his motorbike...',
    options: ['when he passed his driving test.', 'since he passed his driving test.', 'as he passed his driving test.'],
    correct: 1
  },
  {
    question: '23/25 I always get _____ before an important meeting.',
    options: ['butterflies in my stomach', 'All ears', 'A lot on one‚Äôs plate'],
    correct: 0
  },
  {
    question: '24/25 Don‚Äôt buy a car from there they will _ you _.',
    options: ['Rip off', 'Mess up', 'Lay off'],
    correct: 0
  },
  {
    question: '25/25 If you cancel now you‚Äôll _ all my arrangements.',
    options: ['Check out', 'Knuckle down', 'Mess up'],
    correct: 2
  },
];
const userSessions = {}; //  —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const INACTIVITY_TIMEOUT = 60 * 60 * 1000; // 1 —á–∞—Å –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ –∏–¥—ë—Ç —Å–±—Ä–æ—Å)

//–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSubscription(userId) {
  try {
    const chatMember = await bot.getChatMember(requiredChannel, userId);
    return ['member', 'administrator', 'creator'].includes(chatMember.status);
  } catch (error) {
    console.error('Error checking subscription:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
function determineLevel(score) {
  if (score <= 5) return 'A1 (–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)';
  if (score <= 10) return 'A2 (–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)';
  if (score <= 15) return 'B1 (–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)';
  if (score <= 20) return 'B2 (–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è)';
  return 'C1 (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å)';
}

function getLevelDescription(level) {
  const descriptions = {
    'A1 (–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)': 'üìò –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–º–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ü–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Å–ª–æ–≤–∞—Ä–Ω—ã–º –∑–∞–ø–∞—Å–æ–º! üí™',
    'A2 (–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)': 'üìó –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–∏—Ç–∞—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏! üìö',
    'B1 (–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)': 'üìô –í—ã —Å–ø–æ—Å–æ–±–Ω—ã –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –∑–Ω–∞–∫–æ–º—ã–µ —Ç–µ–º—ã. –í—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π! üó£Ô∏è',
    'B2 (–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è)': 'üìï –í—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —è–∑—ã–∫. –ü–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π! ‚úçÔ∏è',
    'C1 (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å)': 'üåü –í—ã –≤–ª–∞–¥–µ–µ—Ç–µ —è–∑—ã–∫–æ–º –ø–æ—á—Ç–∏ –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å. –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è —Ä–µ—á–∏! üèÜ',
  };
  return descriptions[level] || '';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    bot.sendMessage(chatId, `–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannelLink}, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
              callback_data: `check_subscription_${userId}`
            }
          ]
        ]
      }
    });
    return;
  }

  bot.sendPhoto(chatId, 'image1.jpg', {
    caption: '–ü—Ä–∏–≤–µ—Ç! üëã\n\n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n\n–ì–æ—Ç–æ–≤? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üî•',
            callback_data: `start_test_${userId}`,
          },
        ],
      ],
    },
  });
});

bot.on('callback_query', async (query) => {
  const userId = query.from.id;
  const chatId = query.message.chat.id;

  if (query.data.startsWith('check_subscription_')) {
    const isSubscribed = await checkSubscription(userId);
    if (!isSubscribed) {
      bot.sendMessage(chatId, `–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannelLink}.`);
    } else {
      bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.');
      bot.sendPhoto(chatId, 'image1.jpg', {
        caption: '–ü—Ä–∏–≤–µ—Ç! üëã\n\n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n\n–ì–æ—Ç–æ–≤? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üî•',
                callback_data: `start_test_${userId}`,
              },
            ],
          ],
        },
      });
    }
    return;
  }

  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    bot.sendMessage(chatId, `–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannelLink}, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
              callback_data: `check_subscription_${userId}`
            }
          ]
        ]
      }
    });
    return;
  }

  if (query.data.startsWith('start_test_')) {
    userSessions[userId] = {
      currentQuestion: 0,
      score: 0,
      timeout: null,
      messageId: null,
      chatId: chatId,
    };
    sendQuestion(chatId, userId);
    return;
  }

  const session = userSessions[userId];
  if (!session) {
    bot.sendMessage(chatId, '–í–∞—à —Ç–µ—Å—Ç –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–∞–±–µ—Ä–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  if (query.data.startsWith('resume_')) {
    sendQuestion(chatId, userId);
    resetInactivityTimer(userId);
    return;
  }

  const answerIndex = parseInt(query.data.split('_')[1], 10);
  const questionData = testQuestions[session.currentQuestion];

  if (answerIndex === questionData.correct) {
    session.score++;
  }

  session.currentQuestion++;
  sendQuestion(chatId, userId);
  resetInactivityTimer(userId);
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º-–∞—É—Ç–∞
function handleInactivity(userId) {
  const session = userSessions[userId];
  if (session) {
    clearTimeout(session.timeout);

    bot.editMessageText(
      '–í—ã –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç?',
      {
        chat_id: session.chatId,
        message_id: session.messageId,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                callback_data: `resume_${userId}`,
              },
            ],
          ],
        },
      }
    );

    session.timeout = null; // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä
  }
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
function resetInactivityTimer(userId) {
  const session = userSessions[userId];
  if (session) {
    if (session.timeout) {
      clearTimeout(session.timeout);
    }

    session.timeout = setTimeout(() => handleInactivity(userId), INACTIVITY_TIMEOUT);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
function sendQuestion(chatId, userId) {
  const session = userSessions[userId];
  if (!session || session.currentQuestion >= testQuestions.length) {
    if (session) {
      const level = determineLevel(session.score);
      const description = getLevelDescription(level);
      bot.sendMessage(chatId, `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${session.score}/${testQuestions.length}. –£—Ä–æ–≤–µ–Ω—å: ${level}\n\n${description}`).then(() => {
        bot.sendAnimation(chatId, 'gif1.gif');
      });
    } else {
      bot.sendMessage(chatId, '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.');
    }
    resetSession(userId);
    return;
  }

  const questionData = testQuestions[session.currentQuestion];
  const options = {
    reply_markup: {
      inline_keyboard: questionData.options.map((option, index) => [{
        text: option,
        callback_data: `answer_${index}`
      }]) // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å—Ç–æ–ª–±–∏–∫
    },
  };

  if (session.messageId) {
    bot.editMessageText(questionData.question, {
      chat_id: chatId,
      message_id: session.messageId,
      ...options,
    });
  } else {
    bot.sendMessage(chatId, questionData.question, options).then((sentMessage) => {
      session.messageId = sentMessage.message_id;
      session.chatId = chatId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId –≤ —Å–µ—Å—Å–∏–∏
    });
  }

  resetInactivityTimer(userId);
}

// –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
function resetSession(userId) {
  if (userSessions[userId]) {
    clearTimeout(userSessions[userId].timeout);
    delete userSessions[userId];
  }
}
