const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
require('dotenv').config( {path: "./config.env"});
const token = process.env.TELEGRAM_BOT_TOKEN; // —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });
const KeepAlive = require('./keep_alive.js');




const requiredChannel = '-1001857511663'; // –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ id –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —á—Ç–æ–± —á–µ–ª–æ–≤–µ–∫ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω
//const requiredChannel = '-1002366112090'; //test
const requiredChannelLink = "https://t.me/AmericaninSPB"; // –∞ –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
const needchannelid = "-1002478343052"; // —Å—é–¥–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å id —á–∞—Ç–∞ –∫–∞–Ω–∞–ª–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç —Å–∫–∏–¥—ã–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —é–∑–µ—Ä–∞–º
const usersFile = 'users.json';
function initializeUsersFile() {
  if (!fs.existsSync(usersFile)) {
      fs.writeFileSync(usersFile, JSON.stringify([]));
  } else {
      try {
          JSON.parse(fs.readFileSync(usersFile, 'utf8'));
      } catch {
          console.warn('–§–∞–π–ª users.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
          fs.writeFileSync(usersFile, JSON.stringify([]));
      }
  }
}
initializeUsersFile()
function getUsers() {
  try {
      const data = fs.readFileSync(usersFile, 'utf8');
      return JSON.parse(data || '[]'); 
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ users.json:', error);
      return []; 
  }
}


function saveUsers(users) {
    fs.writeFileSync(usersFile, JSON.stringify(users, null, 2));
}

function addUser(chatId) {
    const users = getUsers();
    if (!users.includes(chatId)) {
        users.push(chatId);
        saveUsers(users);
    }
}

const testQuestions = [
  {
    question: '1/25 How old are you?',
    options: ['I is 25.', 'I have 25.', 'I am 25.'],
    correct: 2
  },
  {
    question: '2/25 Do you work on Fridays?',
    options: ['Yes, I work.', 'Yes, I do.', 'Yes, I am.'],
    correct: 1
  },
  {
    question: '3/25 Do you have a brother?',
    options: ['No, I not have.', 'No, me don‚Äôt.', 'No, I don‚Äôt.'],
    correct: 2
  },
  {
    question: '4/25 I‚Äôm going to the shop. ________ you like to come?',
    options: ['Do', 'Are', 'Would'],
    correct: 2
  },
  {
    question: '5/25 I‚Äôd like ____ sugar in my coffee.',
    options: ['Some', 'Any', 'A'],
    correct: 0
  },
  {
    question: '6/25 ____ a hospital near here?',
    options: ['There is', 'Is there', 'There are'],
    correct: 1
  },
  {
    question: '7/25 Have you finished ____ the kitchen yet?',
    options: ['to clean', 'cleaning', 'cleaned'],
    correct: 1
  },
  {
    question: '8/25 She drove the car ____ the garage.',
    options: ['between', 'out of', 'down'],
    correct: 1
  },
  {
    question: '9/25 He ____ very fast when the police _ him.',
    options: ['drove / stop', 'was driving / stopped', 'has drove / was stopping'],
    correct: 1
  },
  {
    question: '10/25 He is good at his job so he ____ a lot of money.',
    options: ['Makes', 'Does', 'Have'],
    correct: 0
  },
  {
    question: '11/25 Do you _ coffee? Yes, but ____ to quit.',
    options: ['drink / I‚Äôm trying', 'drinking / I try', 'drunk / I‚Äôm trying'],
    correct: 0
  },
  {
    question: '12/25 I hurt my leg ____ I was playing football.',
    options: ['During', 'while', 'for'],
    correct: 1
  },
  {
    question: '13/25 This coffee tastes ____ the other.',
    options: ['sweeter than', 'more sweet than', 'more sweeter than'],
    correct: 0
  },
  {
    question: '14/25 David ____ in that industry for many years so a lot of contacts.',
    options: ['is working', 'has been working', 'have worked'],
    correct: 1
  },
  {
    question: '15/25 ____ my leg. ____ it while playing football with my brother.',
    options: ['I‚Äôve broken / I broke', 'Broke / I‚Äôve broken'],
    correct: 0
  },
  {
    question: '16/25 When my brother was 20 he ____ in an apartment in London. At that time, he ____ at HSBC.',
    options: ['used to live / was working', 'had lived / worked', 'would live / had worked'],
    correct: 0
  },
  {
    question: '17/25 I ____ an umbrella with me this morning because it __.',
    options: ['didn‚Äôt take / rained', 'took / was raining', 'took / have rained'],
    correct: 1
  },
  {
    question: '18/25 ____ your question about our services, I have attached a document where you can see all necessary details.',
    options: ['As far as', 'Where as', 'Regarding'],
    correct: 2
  },
  {
    question: '19/25 If only I ____ that you wanted to meet her.',
    options: ['I know', 'had known', 'have known'],
    correct: 1
  },
  {
    question: '20/25 We‚Äôd better find a quick solution to this crisis, ____ all our customers will start to lose faith in us.',
    options: ['in fact', 'otherwise', 'after all'],
    correct: 1
  },
  {
    question: '21/25 The family was shocked that the crime happened in ____ daylight.',
    options: ['wide', 'large', 'broad'],
    correct: 2
  },
  {
    question: '22/25 Tony has had his motorbike...',
    options: ['when he passed his driving test.', 'since he passed his driving test.', 'as he passed his driving test.'],
    correct: 1
  },
  {
    question: '23/25 I always get _____ before an important meeting.',
    options: ['butterflies in my stomach', 'All ears', 'A lot on one‚Äôs plate'],
    correct: 0
  },
  {
    question: '24/25 Don‚Äôt buy a car from there they will ____ you ____.',
    options: ['Rip off', 'Mess up', 'Lay off'],
    correct: 0
  },
  {
    question: '25/25 If you cancel now you‚Äôll ____ all my arrangements.',
    options: ['Check out', 'Knuckle down', 'Mess up'],
    correct: 2
  },
];
const userSessions = {}; //  —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const INACTIVITY_TIMEOUT = 60 * 60 * 1000; // 1 —á–∞—Å –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ –∏–¥—ë—Ç —Å–±—Ä–æ—Å)

//–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSubscription(userId) {
  try {
    const chatMember = await bot.getChatMember(requiredChannel, userId);
    return ['member', 'administrator', 'creator'].includes(chatMember.status);
  } catch (error) {
    console.error('Error checking subscription:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
function determineLevel(score) {
  if (score <= 5) return 'A1 (–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)';
  if (score <= 10) return 'A2 (–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)';
  if (score <= 15) return 'B1 (–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)';
  if (score <= 20) return 'B2 (–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è)';
  return 'C1 (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å)';
}

function getLevelDescription(level) {
  const descriptions = {
    'A1 (–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)': `
üòÑ –Ø —Ä–∞–¥, —á—Ç–æ –≤—ã –Ω–∞—á–∞–ª–∏ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –∏ —É–∂–µ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å —Ç–µ—Å—Ç–æ–º! –ò–∑—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ‚Äì –±–æ–ª—å—à–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—É—Ç—å, –∏ –æ—á–µ–Ω—å –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã –Ω–µ –±–æ–∏—Ç–µ—Å—å –µ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å.

üéÅ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ø—Ä–æ—â–µ –æ—Å–≤–æ–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø–æ–¥–∞—Ä–æ–∫ ‚Äì —Å–ø–∏—Å–æ–∫ –∏–∑ 1000 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤. 
–ò–∑—É—á–∏–≤ –∏—Ö, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –ø–æ–Ω–∏–º–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.
`,
    'A2 (–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)': `
üòÑ –í–∞—É! –£ –≤–∞—Å –Ω–µ–ø–ª–æ—Ö–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –í—ã —É–∂–µ –º–æ–∂–µ—Ç–µ —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫—Ä—É—Ç–æ! 
–í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—É—Ç—å –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∏ —è –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ –æ–Ω –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω.

üéÅ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ø—Ä–æ—â–µ –æ—Å–≤–æ–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø–æ–¥–∞—Ä–æ–∫ ‚Äì —Å–ø–∏—Å–æ–∫ –∏–∑ 1000 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤. 
–ò–∑—É—á–∏–≤ –∏—Ö, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –ø–æ–Ω–∏–º–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.
`,
    'B1 (–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)': `
üò≥ –û–≥–æ! –£ –≤–∞—Å —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –í—ã —É–∂–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –æ–±—â–∞–µ—Ç–µ—Å—å –Ω–∞ –Ω—ë–º, –∫—Ä—É—Ç–æ! 
–í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—É—Ç—å –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∏ —è –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ –æ–Ω –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω.

üéÅ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ø—Ä–æ—â–µ –æ—Å–≤–æ–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø–æ–¥–∞—Ä–æ–∫ ‚Äì —Å–ø–∏—Å–æ–∫ –∏–∑ 1000 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤. 
–ò–∑—É—á–∏–≤ –∏—Ö, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –ø–æ–Ω–∏–º–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.
`,
    'B2 (–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è)': `
üò≥ I'm surprised! –£ –≤–∞—Å –æ—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –í—ã —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–µ—á—å, —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥. –Ø –≤–∞–º–∏ –≥–æ—Ä–∂—É—Å—å!

üéÅ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ ‚Äì —Å–ø–∏—Å–æ–∫ –∏–∑ 1000 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤. 
–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Ö —É–∂–µ –∑–Ω–∞–µ—Ç–µ, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ –∏—Ö –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!
`,
    'C1 (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å)': `
üî• –£ –≤–∞—Å –±–ª–µ—Å—Ç—è—â–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫! –Ø –æ—á–µ–Ω—å –≥–æ—Ä–∂—É—Å—å –≤–∞–º–∏. –ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º –ª—É—á—à–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ ‚Äì –≤—ã —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–µ—á—å, —Ä–µ–¥–∫–æ –¥–æ–ø—É—Å–∫–∞–µ—Ç–µ –æ—à–∏–±–∫–∏ –∏ –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥. –Ø –≤–∞–º —Å—Ç–∞–≤–ª—é 5+.

üéÅ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ ‚Äì —Å–ø–∏—Å–æ–∫ –∏–∑ 1000 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤. 
–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Ö —É–∂–µ –∑–Ω–∞–µ—Ç–µ, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ –∏—Ö –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!
`
  };
  return descriptions[level] || '';
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  addUser(chatId);
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    bot.sendMessage(chatId, `–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannelLink}, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
              callback_data: `check_subscription_${userId}`
            }
          ]
        ]
      }
    });
    return;
  }

  bot.sendPhoto(chatId, 'image1.jpg', {
    caption: '–ü—Ä–∏–≤–µ—Ç! üëã\n\n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n\n–ì–æ—Ç–æ–≤? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üî•',
            callback_data: `start_test_${userId}`,
          },
        ],
      ],
    },
  });
});

bot.on('callback_query', async (query) => {
  const userId = query.from.id;
  const chatId = query.message.chat.id;

  if (query.data.startsWith('check_subscription_')) {
    const isSubscribed = await checkSubscription(userId);
    if (!isSubscribed) {
      bot.sendMessage(chatId, `–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannelLink}.`);
    } else {
      bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.');
      bot.sendPhoto(chatId, 'image1.jpg', {
        caption: '–ü—Ä–∏–≤–µ—Ç! üëã\n\n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n\n–ì–æ—Ç–æ–≤? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üî•',
                callback_data: `start_test_${userId}`,
              },
            ],
          ],
        },
      });
    }
    return;
  }

  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    bot.sendMessage(chatId, `–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannelLink}, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
              callback_data: `check_subscription_${userId}`
            }
          ]
        ]
      }
    });
    return;
  }

  if (query.data.startsWith('start_test_')) {
    userSessions[userId] = {
      currentQuestion: 0,
      score: 0,
      timeout: null,
      messageId: null,
      chatId: chatId,
    };
    sendQuestion(chatId, userId);
    return;
  }

  const session = userSessions[userId];
  if (!session) {
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –µ—Å–ª–∏ —É –≤–∞—Å –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ—Å—Ç.');
    return;
  }

  if (query.data.startsWith('resume_')) {
    sendQuestion(chatId, userId);
    resetInactivityTimer(userId);
    return;
  }

  const answerIndex = parseInt(query.data.split('_')[1], 10);
  const questionData = testQuestions[session.currentQuestion];

  if (answerIndex === questionData.correct) {
    session.score++;
  }

  session.currentQuestion++;
  sendQuestion(chatId, userId);
  resetInactivityTimer(userId);
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º-–∞—É—Ç–∞
function handleInactivity(userId) {
  const session = userSessions[userId];
  if (session) {
    clearTimeout(session.timeout);

    bot.editMessageText(
      '–í—ã –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç?',
      {
        chat_id: session.chatId,
        message_id: session.messageId,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                callback_data: `resume_${userId}`,
              },
            ],
          ],
        },
      }
    );

    session.timeout = null; // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä
  }
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
function resetInactivityTimer(userId) {
  const session = userSessions[userId];
  if (session) {
    if (session.timeout) {
      clearTimeout(session.timeout);
    }

    session.timeout = setTimeout(() => handleInactivity(userId), INACTIVITY_TIMEOUT);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
function sendQuestion(chatId, userId) {
  const session = userSessions[userId];
  if (!session || session.currentQuestion >= testQuestions.length) {
    if (session) {
      const level = determineLevel(session.score);
      const description = getLevelDescription(level);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
      if (session.messageId) {
        bot.deleteMessage(chatId, session.messageId).catch((err) => console.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≥–∏—Ñ–∫—É
      bot.sendMessage(chatId, `‚≠êÔ∏è –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${session.score}/${testQuestions.length}.\n\n ü•á –í–∞—à —É—Ä–æ–≤–µ–Ω—å: ${level}\n\n${description}`).then(() => {
        bot.sendAnimation(chatId, 'gif1.gif');
        bot.sendDocument(chatId, './1000 words.pdf')
      });
    } else {
      bot.sendMessage(chatId, '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.');
    }
    resetSession(userId);
    return;
  }

  const questionData = testQuestions[session.currentQuestion];
  const options = {
    reply_markup: {
      inline_keyboard: questionData.options.map((option, index) => [{
        text: option,
        callback_data: `answer_${index}`
      }]) // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å—Ç–æ–ª–±–∏–∫
    },
  };

  if (session.messageId) {
    bot.editMessageText(questionData.question, {
      chat_id: chatId,
      message_id: session.messageId,
      ...options,
    });
  } else {
    bot.sendMessage(chatId, questionData.question, options).then((sentMessage) => {
      session.messageId = sentMessage.message_id;
      session.chatId = chatId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId –≤ —Å–µ—Å—Å–∏–∏
    });
  }

  resetInactivityTimer(userId);
}


// –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
function resetSession(userId) {
  if (userSessions[userId]) {
    clearTimeout(userSessions[userId].timeout);
    delete userSessions[userId];
  }
}
async function sendMessageToUsers(channelMessage) {
  const users = getUsers();
  const maxMessagesPerSecond = 20; // –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
  const delay = 1000 / maxMessagesPerSecond; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

  let sentCount = 0;

  for (const userId of users) {
      try {
          if (channelMessage.text) {
              await bot.sendMessage(userId, channelMessage.text);
          } else if (channelMessage.photo) {
              const photoId = channelMessage.photo[channelMessage.photo.length - 1].file_id; // –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è —Ñ–æ—Ç–æ ‚Äî –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
              await bot.sendPhoto(userId, photoId, { caption: channelMessage.caption || '' });
          } else if (channelMessage.video) {
              const videoId = channelMessage.video.file_id;
              await bot.sendVideo(userId, videoId, { caption: channelMessage.caption || '' });
          } else if (channelMessage.document) {
              const documentId = channelMessage.document.file_id;
              await bot.sendDocument(userId, documentId, { caption: channelMessage.caption || '' });
          }
          

          sentCount++;
      } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, delay));
  }

  console.log(`–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${sentCount}`);
}

bot.on('channel_post', async (msg) => {
  if (msg.chat.id == needchannelid)
  {
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${msg.chat.id}: ${msg.message_id}`);
      await sendMessageToUsers(msg);
  }
});